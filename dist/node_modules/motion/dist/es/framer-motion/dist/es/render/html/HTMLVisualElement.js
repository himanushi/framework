import { measureViewportBox as s } from "../../projection/utils/measure.js";
import { DOMVisualElement as n } from "../dom/DOMVisualElement.js";
import { isCSSVariableName as a } from "../dom/utils/is-css-variable.js";
import { getDefaultValueType as u } from "../dom/value-types/defaults.js";
import { buildHTMLStyles as p } from "./utils/build-styles.js";
import { transformProps as i } from "./utils/keys-transform.js";
import { renderHTML as l } from "./utils/render.js";
import { scrapeMotionValuesFromProps as f } from "./utils/scrape-motion-values.js";
function c(m) {
  return window.getComputedStyle(m);
}
class w extends n {
  constructor() {
    super(...arguments), this.type = "html", this.renderInstance = l;
  }
  readValueFromInstance(t, e) {
    if (i.has(e)) {
      const r = u(e);
      return r && r.default || 0;
    } else {
      const r = c(t), o = (a(e) ? r.getPropertyValue(e) : r[e]) || 0;
      return typeof o == "string" ? o.trim() : o;
    }
  }
  measureInstanceViewportBox(t, { transformPagePoint: e }) {
    return s(t, e);
  }
  build(t, e, r) {
    p(t, e, r.transformTemplate);
  }
  scrapeMotionValuesFromProps(t, e, r) {
    return f(t, e, r);
  }
}
export {
  w as HTMLVisualElement,
  c as getComputedStyle
};
