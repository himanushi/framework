import { frame as n } from "../../frameloop/frame.js";
import { makeUseVisualState as u } from "../../motion/utils/use-visual-state.js";
import { transformProps as d } from "../html/utils/keys-transform.js";
import { buildSVGAttrs as l } from "./utils/build-attrs.js";
import { createSvgRenderState as g } from "./utils/create-render-state.js";
import { isSVGTag as c } from "./utils/is-svg-tag.js";
import { updateSVGDimensions as S } from "./utils/measure.js";
import { renderSVG as V } from "./utils/render.js";
import { scrapeMotionValuesFromProps as h } from "./utils/scrape-motion-values.js";
const p = ["x", "y", "width", "height", "cx", "cy", "r"], R = {
  useVisualState: u({
    scrapeMotionValuesFromProps: h,
    createRenderState: g,
    onUpdate: ({ props: t, prevProps: e, current: o, renderState: i, latestValues: a }) => {
      if (!o)
        return;
      let m = !!t.drag;
      if (!m) {
        for (const r in a)
          if (d.has(r)) {
            m = !0;
            break;
          }
      }
      if (!m)
        return;
      let f = !e;
      if (e)
        for (let r = 0; r < p.length; r++) {
          const s = p[r];
          t[s] !== e[s] && (f = !0);
        }
      f && n.read(() => {
        S(o, i), n.render(() => {
          l(i, a, c(o.tagName), t.transformTemplate), V(o, i);
        });
      });
    }
  })
};
export {
  R as svgMotionConfig
};
