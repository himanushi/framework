import { invariant as h } from "../../../../motion-utils/dist/es/errors.js";
import { noop as x } from "../../../../motion-utils/dist/es/noop.js";
import { progress as y } from "../../../../motion-utils/dist/es/progress.js";
import { clamp as M } from "./clamp.js";
import { mix as b } from "./mix/index.js";
import { pipe as A } from "./pipe.js";
function F(r, e, c) {
  const t = [], f = c || b, n = r.length - 1;
  for (let o = 0; o < n; o++) {
    let s = f(r[o], r[o + 1]);
    if (e) {
      const a = Array.isArray(e) ? e[o] || x : e;
      s = A(a, s);
    }
    t.push(s);
  }
  return t;
}
function I(r, e, { clamp: c = !0, ease: t, mixer: f } = {}) {
  const n = r.length;
  if (h(n === e.length, "Both input and output ranges must be the same length"), n === 1)
    return () => e[0];
  if (n === 2 && e[0] === e[1])
    return () => e[1];
  const o = r[0] === r[1];
  r[0] > r[n - 1] && (r = [...r].reverse(), e = [...e].reverse());
  const s = F(e, t, f), a = s.length, l = (m) => {
    if (o && m < r[0])
      return e[0];
    let i = 0;
    if (a > 1)
      for (; i < r.length - 2 && !(m < r[i + 1]); i++)
        ;
    const g = y(r[i], r[i + 1], m);
    return s[i](g);
  };
  return c ? (m) => l(M(r[0], r[n - 1], m)) : l;
}
export {
  I as interpolate
};
