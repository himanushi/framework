import { frame as o } from "../../frameloop/frame.js";
import { createBox as i } from "../../projection/geometry/models.js";
import { DOMVisualElement as m } from "../dom/DOMVisualElement.js";
import { camelToDash as a } from "../dom/utils/camel-to-dash.js";
import { getDefaultValueType as n } from "../dom/value-types/defaults.js";
import { transformProps as p } from "../html/utils/keys-transform.js";
import { buildSVGAttrs as u } from "./utils/build-attrs.js";
import { camelCaseAttributes as f } from "./utils/camel-case-attrs.js";
import { isSVGTag as d } from "./utils/is-svg-tag.js";
import { updateSVGDimensions as l } from "./utils/measure.js";
import { renderSVG as h } from "./utils/render.js";
import { scrapeMotionValuesFromProps as V } from "./utils/scrape-motion-values.js";
class M extends m {
  constructor() {
    super(...arguments), this.type = "svg", this.isSVGTag = !1, this.measureInstanceViewportBox = i, this.updateDimensions = () => {
      this.current && !this.renderState.dimensions && l(this.current, this.renderState);
    };
  }
  getBaseTargetFromProps(t, r) {
    return t[r];
  }
  readValueFromInstance(t, r) {
    if (p.has(r)) {
      const e = n(r);
      return e && e.default || 0;
    }
    return r = f.has(r) ? r : a(r), t.getAttribute(r);
  }
  scrapeMotionValuesFromProps(t, r, e) {
    return V(t, r, e);
  }
  onBindTransform() {
    this.current && !this.renderState.dimensions && o.postRender(this.updateDimensions);
  }
  build(t, r, e) {
    u(t, r, this.isSVGTag, e.transformTemplate);
  }
  renderInstance(t, r, e, s) {
    h(t, r, e, s);
  }
  mount(t) {
    this.isSVGTag = d(t.tagName), super.mount(t);
  }
}
export {
  M as SVGVisualElement
};
