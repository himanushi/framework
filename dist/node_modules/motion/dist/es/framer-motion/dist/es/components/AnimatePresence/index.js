import { jsx as g, Fragment as K } from "react/jsx-runtime";
import { useMemo as M, useRef as E, useState as w, useContext as N } from "react";
import { LayoutGroupContext as T } from "../../context/LayoutGroupContext.js";
import { useConstant as F } from "../../utils/use-constant.js";
import { PresenceChild as G } from "./PresenceChild.js";
import { usePresence as O } from "./use-presence.js";
import { onlyElements as R, getChildKey as c } from "./utils.js";
import { useIsomorphicLayoutEffect as S } from "../../utils/use-isomorphic-effect.js";
const J = ({ children: h, custom: k, initial: A = !0, onExitComplete: p, presenceAffectsLayout: L = !0, mode: u = "sync", propagate: l = !1, anchorX: b = "left" }) => {
  const [C, f] = O(l), n = M(() => R(h), [h]), o = l && !C ? [] : n.map(c), y = E(!0), v = E(n), r = F(() => /* @__PURE__ */ new Map()), [j, D] = w(n), [i, x] = w(n);
  S(() => {
    y.current = !1, v.current = n;
    for (let t = 0; t < i.length; t++) {
      const e = c(i[t]);
      o.includes(e) ? r.delete(e) : r.get(e) !== !0 && r.set(e, !1);
    }
  }, [i, o.length, o.join("-")]);
  const d = [];
  if (n !== j) {
    let t = [...n];
    for (let e = 0; e < i.length; e++) {
      const s = i[e], a = c(s);
      o.includes(a) || (t.splice(e, 0, s), d.push(s));
    }
    return u === "wait" && d.length && (t = d), x(R(t)), D(n), null;
  }
  process.env.NODE_ENV !== "production" && u === "wait" && i.length > 1 && console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  const { forceRender: m } = N(T);
  return g(K, { children: i.map((t) => {
    const e = c(t), s = l && !C ? !1 : n === i || o.includes(e), a = () => {
      if (r.has(e))
        r.set(e, !0);
      else
        return;
      let P = !0;
      r.forEach((I) => {
        I || (P = !1);
      }), P && (m == null || m(), x(v.current), l && (f == null || f()), p && p());
    };
    return g(G, { isPresent: s, initial: !y.current || A ? void 0 : !1, custom: k, presenceAffectsLayout: L, mode: u, onExitComplete: s ? void 0 : a, anchorX: b, children: t }, e);
  }) });
};
export {
  J as AnimatePresence
};
