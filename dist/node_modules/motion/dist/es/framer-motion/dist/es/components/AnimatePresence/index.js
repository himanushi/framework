import { j as h } from "../../../../../../../../../_virtual/jsx-runtime.js";
import { useMemo as K, useRef as g, useState as w, useContext as M } from "react";
import { LayoutGroupContext as N } from "../../context/LayoutGroupContext.js";
import { useConstant as T } from "../../utils/use-constant.js";
import { PresenceChild as F } from "./PresenceChild.js";
import { usePresence as G } from "./use-presence.js";
import { onlyElements as R, getChildKey as c } from "./utils.js";
import { useIsomorphicLayoutEffect as O } from "../../utils/use-isomorphic-effect.js";
const H = ({ children: p, custom: j, initial: k = !0, onExitComplete: C, presenceAffectsLayout: A = !0, mode: u = "sync", propagate: l = !1, anchorX: L = "left" }) => {
  const [x, f] = G(l), n = K(() => R(p), [p]), o = l && !x ? [] : n.map(c), y = g(!0), v = g(n), s = T(() => /* @__PURE__ */ new Map()), [b, D] = w(n), [i, E] = w(n);
  O(() => {
    y.current = !1, v.current = n;
    for (let t = 0; t < i.length; t++) {
      const e = c(i[t]);
      o.includes(e) ? s.delete(e) : s.get(e) !== !0 && s.set(e, !1);
    }
  }, [i, o.length, o.join("-")]);
  const d = [];
  if (n !== b) {
    let t = [...n];
    for (let e = 0; e < i.length; e++) {
      const r = i[e], a = c(r);
      o.includes(a) || (t.splice(e, 0, r), d.push(r));
    }
    return u === "wait" && d.length && (t = d), E(R(t)), D(n), null;
  }
  process.env.NODE_ENV !== "production" && u === "wait" && i.length > 1 && console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  const { forceRender: m } = M(N);
  return h.jsx(h.Fragment, { children: i.map((t) => {
    const e = c(t), r = l && !x ? !1 : n === i || o.includes(e), a = () => {
      if (s.has(e))
        s.set(e, !0);
      else
        return;
      let P = !0;
      s.forEach((I) => {
        I || (P = !1);
      }), P && (m == null || m(), E(v.current), l && (f == null || f()), C && C());
    };
    return h.jsx(F, { isPresent: r, initial: !y.current || k ? void 0 : !1, custom: j, presenceAffectsLayout: A, mode: u, onExitComplete: r ? void 0 : a, anchorX: L, children: t }, e);
  }) });
};
export {
  H as AnimatePresence
};
