import { jsx as g } from "react/jsx-runtime";
import * as d from "react";
import { useId as x, useRef as c, useContext as C, useInsertionEffect as R } from "react";
import { MotionConfigContext as $ } from "../../context/MotionConfigContext.js";
class w extends d.Component {
  getSnapshotBeforeUpdate(n) {
    const e = this.props.childRef.current;
    if (e && n.isPresent && !this.props.isPresent) {
      const i = e.offsetParent, o = i instanceof HTMLElement && i.offsetWidth || 0, t = this.props.sizeRef.current;
      t.height = e.offsetHeight || 0, t.width = e.offsetWidth || 0, t.top = e.offsetTop, t.left = e.offsetLeft, t.right = o - t.width - t.left;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
}
function I({ children: s, isPresent: n, anchorX: e }) {
  const i = x(), o = c(null), t = c({
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    right: 0
  }), { nonce: p } = C($);
  return R(() => {
    const { width: f, height: h, top: l, left: a, right: m } = t.current;
    if (n || !o.current || !f || !h)
      return;
    const u = e === "left" ? `left: ${a}` : `right: ${m}`;
    o.current.dataset.motionPopId = i;
    const r = document.createElement("style");
    return p && (r.nonce = p), document.head.appendChild(r), r.sheet && r.sheet.insertRule(`
          [data-motion-pop-id="${i}"] {
            position: absolute !important;
            width: ${f}px !important;
            height: ${h}px !important;
            ${u}px !important;
            top: ${l}px !important;
          }
        `), () => {
      document.head.removeChild(r);
    };
  }, [n]), g(w, { isPresent: n, childRef: o, sizeRef: t, children: d.cloneElement(s, { ref: o }) });
}
export {
  I as PopChild
};
