import { useContext as C } from "react";
import { isAnimationControls as x } from "../../animation/utils/is-animation-controls.js";
import { MotionContext as S } from "../../context/MotionContext/index.js";
import { PresenceContext as h } from "../../context/PresenceContext.js";
import { isControllingVariants as M, isVariantNode as N } from "../../render/utils/is-controlling-variants.js";
import { resolveVariantFromProps as P } from "../../render/utils/resolve-variants.js";
import { useConstant as T } from "../../utils/use-constant.js";
import { resolveMotionValue as $ } from "../../value/utils/resolve-motion-value.js";
function b({ scrapeMotionValuesFromProps: t, createRenderState: e, onUpdate: i }, s, o, r) {
  const n = {
    latestValues: B(s, o, r, t),
    renderState: e()
  };
  return i && (n.onMount = (a) => i({ props: s, current: a, ...n }), n.onUpdate = (a) => i(a)), n;
}
const G = (t) => (e, i) => {
  const s = C(S), o = C(h), r = () => b(t, e, s, o);
  return i ? r() : T(r);
};
function B(t, e, i, s) {
  const o = {}, r = s(t, {});
  for (const m in r)
    o[m] = $(r[m]);
  let { initial: n, animate: a } = t;
  const g = M(t), v = N(t);
  e && v && !g && t.inherit !== !1 && (n === void 0 && (n = e.initial), a === void 0 && (a = e.animate));
  let u = i ? i.initial === !1 : !1;
  u = u || n === !1;
  const l = u ? a : n;
  if (l && typeof l != "boolean" && !x(l)) {
    const m = Array.isArray(l) ? l : [l];
    for (let d = 0; d < m.length; d++) {
      const V = P(t, m[d]);
      if (V) {
        const { transitionEnd: k, transition: E, ...y } = V;
        for (const c in y) {
          let f = y[c];
          if (Array.isArray(f)) {
            const A = u ? f.length - 1 : 0;
            f = f[A];
          }
          f !== null && (o[c] = f);
        }
        for (const c in k)
          o[c] = k[c];
      }
    }
  }
  return o;
}
export {
  G as makeUseVisualState
};
