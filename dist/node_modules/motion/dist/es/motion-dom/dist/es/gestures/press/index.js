import { isDragActive as b } from "../drag/state/is-active.js";
import { isNodeOrChild as g } from "../utils/is-node-or-child.js";
import { isPrimaryPointer as v } from "../utils/is-primary-pointer.js";
import { setupGesture as E } from "../utils/setup.js";
import { isElementKeyboardAccessible as L } from "./utils/is-keyboard-accessible.js";
import { enableKeyboardPress as h } from "./utils/keyboard.js";
import { isPressing as i } from "./utils/state.js";
function p(s) {
  return v(s) && !b();
}
function O(s, m, a = {}) {
  const [u, n, l] = E(s, a), w = (e) => {
    const r = e.currentTarget;
    if (!p(e) || i.has(r))
      return;
    i.add(r);
    const o = m(r, e), d = (t, P) => {
      window.removeEventListener("pointerup", c), window.removeEventListener("pointercancel", f), !(!p(t) || !i.has(r)) && (i.delete(r), typeof o == "function" && o(t, { success: P }));
    }, c = (t) => {
      d(t, a.useGlobalTarget || g(r, t.target));
    }, f = (t) => {
      d(t, !1);
    };
    window.addEventListener("pointerup", c, n), window.addEventListener("pointercancel", f, n);
  };
  return u.forEach((e) => {
    !L(e) && e.getAttribute("tabindex") === null && (e.tabIndex = 0), (a.useGlobalTarget ? window : e).addEventListener("pointerdown", w, n), e.addEventListener("focus", (o) => h(o, n), n);
  }), l;
}
export {
  O as press
};
