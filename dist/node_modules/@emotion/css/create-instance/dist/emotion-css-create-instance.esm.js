import y from "../../../cache/dist/emotion-cache.browser.esm.js";
import { serializeStyles as m } from "../../../serialize/dist/emotion-serialize.esm.js";
import { getRegisteredStyles as d, insertStyles as b } from "../../../utils/dist/emotion-utils.browser.esm.js";
function h(f, u) {
  if (f.inserted[u.name] === void 0)
    return f.insert("", u, f.sheet, !0);
}
function g(f, u, e) {
  var a = [], s = d(f, a, e);
  return a.length < 2 ? e : s + u(a);
}
var x = function(u) {
  var e = y(u);
  e.sheet.speedy = function(c) {
    this.isSpeedy = c;
  }, e.compat = !0;
  var a = function() {
    for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++)
      n[r] = arguments[r];
    var o = m(n, e.registered, void 0);
    return b(e, o, !1), e.key + "-" + o.name;
  }, s = function() {
    for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++)
      n[r] = arguments[r];
    var o = m(n, e.registered), v = "animation-" + o.name;
    return h(e, {
      name: o.name,
      styles: "@keyframes " + v + "{" + o.styles + "}"
    }), v;
  }, i = function() {
    for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++)
      n[r] = arguments[r];
    var o = m(n, e.registered);
    h(e, o);
  }, l = function() {
    for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++)
      n[r] = arguments[r];
    return g(e.registered, a, p(n));
  };
  return {
    css: a,
    cx: l,
    injectGlobal: i,
    keyframes: s,
    hydrate: function(t) {
      t.forEach(function(n) {
        e.inserted[n] = !0;
      });
    },
    flush: function() {
      e.registered = {}, e.inserted = {}, e.sheet.flush();
    },
    sheet: e.sheet,
    cache: e,
    getRegisteredStyles: d.bind(null, e.registered),
    merge: g.bind(null, e.registered, a)
  };
}, p = function f(u) {
  for (var e = "", a = 0; a < u.length; a++) {
    var s = u[a];
    if (s != null) {
      var i = void 0;
      switch (typeof s) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(s))
            i = f(s);
          else {
            i = "";
            for (var l in s)
              s[l] && l && (i && (i += " "), i += l);
          }
          break;
        }
        default:
          i = s;
      }
      i && (e && (e += " "), e += i);
    }
  }
  return e;
};
export {
  x as default
};
